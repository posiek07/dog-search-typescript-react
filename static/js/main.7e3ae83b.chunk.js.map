{"version":3,"sources":["components/Images.tsx","components/SelectBox.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Images","images","className","map","img","index","role","src","alt","SelectBox","values","labelText","name","register","error","htmlFor","id","ref","aria-label","value","App","useState","allBreads","setAllBreads","setImages","fetchError","setFetchError","useForm","mode","errors","handleSubmit","watch","unregister","allBreedsKeys","Object","keys","selectedBreed","selectedSubBreed","length","undefined","numberOfImages","Array","from","_","i","toString","useEffect","fetch","then","res","a","json","fetchedResponse","ok","message","catch","err","onSubmit","form","subbreed","breed","number","fetchedImages","parseInt","required","minLength","subBreeds","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7e3ae83b.chunk.js","sourcesContent":["import React from 'react';\r\nimport { SRLWrapper } from 'simple-react-lightbox';\r\n\r\ninterface ImagesProps {\r\n  images: string[];\r\n}\r\n\r\nconst Images: React.FC<ImagesProps> = ({ images }) => {\r\n  return (\r\n    <SRLWrapper>\r\n      <div className=\"row d-flex justify-content-center ml-0 mr-0\">\r\n        {images.map((img, index) => (\r\n          <div\r\n            key={index}\r\n            className=\"col-4 col-md-1 m-3 image-container \"\r\n            role=\"feed\"\r\n          >\r\n            <img className=\"img-fluid\" src={img} alt={img} />\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </SRLWrapper>\r\n  );\r\n};\r\nexport default Images;\r\n","import React, { LegacyRef } from 'react';\r\n\r\ninterface SelectBoxProps {\r\n  values: string[];\r\n  labelText: string;\r\n  name: string;\r\n  register: LegacyRef<HTMLSelectElement> | undefined;\r\n  error: any;\r\n}\r\n\r\nconst SelectBox: React.FC<SelectBoxProps> = ({\r\n  values,\r\n  labelText,\r\n  name,\r\n  register,\r\n  error\r\n}) => {\r\n  return (\r\n    <div className=\"col-md-3 col-12 form-group mb-2\">\r\n      <label htmlFor={name} className=\"label\">{`${labelText}:`}</label>\r\n      <select\r\n        id={name}\r\n        name={name}\r\n        ref={register}\r\n        className={`custom-select ${error && 'is-invalid'}`}\r\n        aria-label={name}\r\n      >\r\n        <option key={name} value=\"\">\r\n          Select {name}:\r\n        </option>\r\n        {values.map((value, index) => (\r\n          <option key={`${name}${index}`} value={value}>\r\n            {value}\r\n          </option>\r\n        ))}\r\n      </select>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SelectBox;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { useForm } from 'react-hook-form';\nimport Images from './components/Images';\nimport SelectBox from './components/SelectBox';\n\n// Small fix for typescript complaining about key being a string\ninterface AllBreadsInterface {\n  [key: string]: string[] | [string];\n}\n\ninterface FormInterface {\n  breed: string;\n  subbreed: string;\n  number: string;\n}\n\nconst App: React.FC = () => {\n  const [allBreads, setAllBreads] = useState<AllBreadsInterface>({});\n  const [images, setImages] = useState<string[]>([]);\n  const [fetchError, setFetchError] = useState<string>();\n\n  const { register, errors, handleSubmit, watch, unregister } = useForm({\n    mode: 'onChange'\n  });\n\n  /* To avoid any extra request later for subBreads select we will use the whole object with all breads*/\n  const allBreedsKeys = Object.keys(allBreads);\n\n  const selectedBreed = watch('breed');\n\n  const selectedSubBreed = allBreads[selectedBreed];\n  selectedBreed &&\n    selectedSubBreed.length === 0 &&\n    unregister('subbbread') &&\n    setFetchError(undefined);\n\n  const numberOfImages = Array.from({ length: 50 }, (_, i) =>\n    (i + 1).toString()\n  );\n\n  useEffect(() => {\n    fetch('https://dog.ceo/api/breeds/list/all')\n      .then(async (res) => {\n        const fetchedResponse = await res.json();\n        if (res.ok) {\n          setAllBreads(fetchedResponse.message);\n        } else {\n          setFetchError(fetchedResponse.message);\n        }\n      })\n      .catch((err) => setFetchError(err.message));\n  }, []);\n\n  const fetchImagesHandler = (form: FormInterface) => {\n    setFetchError(undefined);\n    if (form.subbreed) {\n      fetch(\n        `https://dog.ceo/api/breed/${form.breed}/${form.subbreed}/images/random/${form.number}`\n      )\n        .then(async (res) => {\n          const fetchedImages = await res.json();\n          if (res.ok) {\n            setImages(fetchedImages.message);\n            fetchedImages.message.length < parseInt(form.number) &&\n              setFetchError(\n                `Not enough images. We only have ${fetchedImages.message.length} of that sub breed in our database.`\n              );\n          } else {\n            setFetchError(fetchedImages.message);\n          }\n        })\n        .catch((err) => setFetchError(err.message));\n    } else {\n      fetch(\n        `https://dog.ceo/api/breed/${form.breed}/images/random/${form.number}`\n      )\n        .then(async (res) => {\n          const fetchedImages = await res.json();\n          if (res.ok) {\n            setImages(fetchedImages.message);\n            fetchedImages.message.length < parseInt(form.number) &&\n              setFetchError(\n                `Not enough images. We only have ${fetchedImages.message.length} of that sub breed in our database.`\n              );\n          } else {\n            setFetchError(fetchedImages.message);\n          }\n        })\n        .catch((err) => setFetchError(err.message));\n    }\n  };\n\n  return (\n    <div className=\"App p-1\">\n      <img\n        className=\"logo\"\n        src=\"https://dog.ceo/img/dog-api-logo.svg\"\n        alt=\"logo\"\n      />\n      <form\n        onSubmit={handleSubmit(fetchImagesHandler)}\n        className=\"row d-flex justify-content-left m-4\"\n      >\n        <SelectBox\n          labelText=\"Breed\"\n          name=\"breed\"\n          register={register({ required: true, minLength: 1 })}\n          values={allBreedsKeys}\n          error={errors.breed}\n        />\n\n        {selectedSubBreed && selectedSubBreed.length > 0 && (\n          <SelectBox\n            labelText=\"Sub breed\"\n            name=\"subbreed\"\n            register={register({ required: false, minLength: 1 })}\n            values={selectedSubBreed}\n            error={errors.subBreeds}\n          />\n        )}\n        <SelectBox\n          labelText=\"Number of images\"\n          name=\"number\"\n          register={register({ required: true })}\n          values={numberOfImages}\n          error={errors.number}\n        />\n\n        <button type=\"submit\" className=\"btn btn-primary row-3 mb-2 ml-3\">\n          Show images\n        </button>\n      </form>\n      {fetchError && (\n        <div className=\"alert alert-danger\" role=\"alert\">\n          {fetchError}\n        </div>\n      )}\n      {images && <Images images={images} />}\n    </div>\n  );\n};\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport SimpleReactLightbox from 'simple-react-lightbox';\n\nReactDOM.render(\n  <React.StrictMode>\n    <SimpleReactLightbox>\n      <App />\n    </SimpleReactLightbox>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}